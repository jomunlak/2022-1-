

list의 확장형이 numpy라면
dict의 확장형은 pandas

둘의 목적은 같지만 표현에 차이가 있다.
pandas는 칼럼마다 칼럼 이름을 지정해줘야한다. 
칼럼 기준으로 찾는다.


pandas를 주로 쓰는 경우. 
 - 숫자/문자/날짜 등이 섞여 있는데이터 처리
 - 머신러닝과 딥러닝의 전처리 과정

DataFrame을 만드는 두 가지 방법
 행별 데이타 삽입 후 컬럼 이름 정해주기 
 컬럼별 데이터 삽입하기

info()와 describe()
 info() : 각 컬럼의 데이터 타입과 Non-Null Count를 보여주낟
 describe() : 각 컬럼별로 모든 통계 함수를 적용한 값을 보여준다 (평균, 표준편차, 분산, 최소값, 최대값...)


여러 행 골라내기
data[:2]
data[[True, False, True]]
 >>> 슬라이싱과 불리언 색인을 사용하면 행을 가져온다 < WTF??
 기본적으로 칼럼을 기준으로 데이터를 가져오는 판다스지만 이 두 가지 경우는 예외. 그냥 외워!

numpy와 비슷한 iloc
data.iloc[:]
 iloc을 사용하면 데이터를 numpy식으로 사용 가능


pandas 데이터프레임 numpy array로 변환
 data[['~~', '~~', '~~']].values >> array 반환함
 *** 주의할점 ! 모든 데이터프레임을 array로 변환할때 문자열이 있거나 하는 경우 제외시켜줘야함

 unique 함수.
data.지역.unique() > 하나의 컬럼 중복이 제외된 array를 반환

 drop_duplicates 함수
unique 함수와 비슷, 중복된 행을 제거한 array 반환

날짜형 변환
numpy로 변환할때 중요한 기능, 문자열을 잘 사용하지 않기 때문에
pd.to_datetime(data.생일) : 생일 컬럼의 문자열을 datetime 형식으로 바꿈


datetime 데이터형일경우 사용가능한 .dt
data.date.dt.year > 연 데이터만 반환
data.date.dt.dayofweek > 주의 일을 반환

문자열 데이터에 사용가능한 .str
data.이름.str[1:] 제일 앞 글자만 제거한 문자열 반환


data.지역.value_counts() : 지역별 발생횟수 반환
data.sort_value('국어')  : 지정한 칼럼을 기준으로 정렬


널값 처리 매우 중요 ! 날것의 데이터는 널값이 빈번하게 포함되어있음




딥러닝은 머신러닝의 하위 개념. 딥러닝을 이해하기 위해서는 머신러닝을 알아야한다.
머신러닝의 정의
머신러닝은 기존의 데이터를 분석하여 미래를 예측하는 것.


수치화 가능한 데이터 선정.
예측 하는것이 핵심
예측의 아이디어와 알고리즘은 사람이 알려줘야한다.
신경망은 머신 러닝의 대표적 알고리즘 중의 하나.

머신러닝의 구분
회귀/분류
지도학습/비지도학습

파이썬 머신러닝 라이브러리
scikit learn : 신경망 제외 모든 머신러닝 알고리즘
tensorflow/keras 

데이터를 연결하는 최적의 선이나 평면을 그림 >> 회귀
데이터를 나누는 최적의 선이나 평면을 그린다 >> 분류

회귀의 종류
선형 회귀 : 데이터를 연결하는 곧은 직선이나 평면을 구한다.

2차원 산점도를 이용한 iris 데이터 분석 예제

























